<?php

/**
 * Implementation of hook_menu
 */
function node_table_menu(){
  $items['node-table'] = array(
    'title' => 'Node Table-List',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Base Custom Module that Displays Nodes in a Table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_table_form'),
    'access callback' => TRUE,    );
  $items['node-table/result'] = array(
    // 'title' => 'Node Table-List Result',
    'description' => 'Render Results for the Node Table-List Form.',
    'page callback' => array('node_table_result'),
    'access callback' => TRUE,
    'type'=> MENU_CALLBACK,
  );

  return $items;
}

function node_table_form() {
  $form = array();
  $form['options']=array(
    '#type'=>'fieldset',
    '#title'=>t('Select Options for the Node Table-List'),
    '#description'=>t('Make Selections below to Override the Defaults'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    );
  $options_array = array(
    'limit',
    'content_types',
    'list',
    'orderby',
    'dev',
    );
  $option_titles_array = array(
    'limit' => 'Limit',
    'content_types' => 'Content Type',
    'list' => 'List',
    'orderby' => 'Sort Order',
    'dev' => 'Developer Ouput',
    );
  $option_descrs_array = array(
    'limit' => 'The default Limit is 10 [1 if \'Developer Ouput\' is selected]',
    'content_types' => 'Will only display Nodes of the selected Content Type',
    'list' => 'Enter a comma-separated list of Node IDs',
    'orderby' => 'Sort by Title or Node ID [\'Random\' is default][ascending only]',
    'dev' => 'Output is Full Node Object(s) with all the gory details',
    );
  $option_this = array_shift($options_array);
  $option_descr_this = array_shift($option_descrs_array);
  $option_title_this = array_shift($option_titles_array);
  $form['options'][$option_this] = array(
    '#type' => 'textfield',
    '#title' => t($option_title_this),
    '#description'=>t($option_descr_this),
    '#size' => 6,
    '#maxlength' => 6,
    '#element_validate' => array('element_validate_integer_positive'),
    );
  $option_this = array_shift($options_array);
  $option_descr_this = array_shift($option_descrs_array);
  $option_title_this = array_shift($option_titles_array);
  // $type_array = node_type_get_types();
  // $content_type_option_array[''] = '-';//char(8212);
  // foreach ($type_array as $key => $type_object) {
  //   $content_type_option_array[$key] = $type_object->name;
  // }
  $content_type_option_array = _get_content_type_option_array(TRUE);
  $form['options'][$option_this] = array(
    '#type' => 'select',
    '#title' => t($option_title_this),
    '#description'=>t($option_descr_this),
    '#default_value' => '',
    '#options' => $content_type_option_array,
    );
  $option_this = array_shift($options_array);
  $option_descr_this = array_shift($option_descrs_array);
  $option_title_this = array_shift($option_titles_array);
  $form['options'][$option_this] = array(
    '#type' => 'textfield',
    '#title' => t($option_title_this),
    '#description'=>t($option_descr_this),
    '#size' => 60,
    '#maxlength' => 128,
    );
  $option_this = array_shift($options_array);
  $option_descr_this = array_shift($option_descrs_array);
  $option_title_this = array_shift($option_titles_array);
  $form['options'][$option_this] = array(
    '#type' => 'radios',
    '#title' => t($option_title_this),
    '#description'=>t($option_descr_this),
    '#default_value' => 'RANDOM',
    '#options' => array(
      'TITLE' => t('Title'),
      'NID' => t('Node ID'),
      'RANDOM' => t('Random'),
      ),
    );
  $option_this = array_shift($options_array);
  $option_descr_this = array_shift($option_descrs_array);
  $option_title_this = array_shift($option_titles_array);
  $form['options'][$option_this] = array(
    '#type' => 'checkboxes',
    '#title' => t($option_title_this),
    '#description'=>t($option_descr_this),
    '#options' => array('1' => t('Developer Ouput')),
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Display Node Table-List')
    );

  return $form;
}

function node_table_form_validate(&$form, &$form_state) {
  $list = $form_state['values']['list'];
  $list = str_replace(' ', '', $list);
  $list = str_replace(',', '', $list);
  $is_valid = ctype_digit($list) ? TRUE : FALSE;
  $is_valid = empty($list) ? TRUE : $is_valid;
  if (!$is_valid) {
    form_set_error('list', t('List field can only contain digits, commas and (optionally) spaces'));
  }
}
function node_table_form_submit($form, &$form_state) {
  // drupal_set_message(t('The form has been submitted.'));
  $option_key_array = array(
    'limit',
    'content_types',
    'list',
    'orderby',
    'dev',
    );
  $option_array = array();
  foreach ($option_key_array as $index => $option_this) {
    if ($option_this == 'dev') {
      $option_array[$option_this] = $form_state['values'][$option_this][1] + 0;
    }elseif(!empty($form_state['values'][$option_this])){
      $option_array[$option_this] = $form_state['values'][$option_this];
    }
  }
  $limit = $option_array['dev'] == 1 ? 1 : 10;
  $limit = @$option_array['limit'] + 0 == 0 ? $limit : $option_array['limit'] + 0;
  $option_array['limit'] = $limit;
  $option_string = '';
  $comma_string = '';
  foreach ($option_array as $key => $value) {
    $option_string .= $comma_string . $key . '=' . $value;
    $comma_string = ',';
  }
  $query_array = array('query' => $option_array);
  // drupal_set_message('In Submit Handler: ' . print_r($option_string, TRUE));
  // $form_state['redirect'] = array('node-table/result', $option_array);
  $form_state['redirect'] = array('node-table/result', $query_array);

}

function node_table_result() {
  $option_key_array = array(
  'limit',
  'content_types',
  'list',
  'orderby',
  'dev',
  );
  $option_array = array();
  foreach ($option_key_array as $index => $key) {
    if (!empty($_GET[$key])) {
      $option_array[$key] = $_GET[$key];
    }
  }
  $paragraph_one = '';//maybe later
  $paragraph_two = '';//maybe later
  $node_object_array = _gather_node_object_array($option_array);

  if (@$option_array['dev'] + 0 == 1) {
    $output = '<p>' . '<pre>' . print_r($node_object_array, TRUE) . '</pre>' . '</p>';
  }else{
    $header = array();
    $rows = array();
    $attributes = array();
    $caption = 'Node Table-List Result';
    $colgroups = array();
    $sticky = array();
    $empty = array();
    $i = 0;
    $column_array = array('nid', 'type', 'title');
    foreach ($node_object_array as $nid => $node_object) {
      if ($i == 0) {
        // $rows[$i]['rownum'] = '#';
        $header['rownum'] = '#';
        foreach ($column_array as $index => $column) {
          // $rows[$i][$column] = ucwords($column);
          $header[$column] = ucwords($column);
        }
      }
      $i++;
      $rows[$i]['rownum'] = $i;
      foreach ($column_array as $index => $column) {
        $rows[$i][$column] = $node_object->$column;
      }
    };
    $variables = array();
    $variables['header'] = $header;
    $variables['rows'] = $rows;
    $variables['attributes'] = $attributes;
    $variables['attributes'] = $attributes;
    $variables['caption'] = $caption;
    $variables['colgroups'] = $colgroups;
    $variables['sticky'] = $sticky;
    $variables['empty'] = $empty;

    // $output = '<p>' . '<pre>' . print_r($rows, TRUE) . '</pre>' . '</p>';
    $output = theme_table($variables);
  }

  $build = array(
    'header_text' => array(
      '#type' => 'markup',
      '#markup' => $output . $paragraph_one . $paragraph_two,
    ),
  );
return $build;
}

/**
 * Implementation of hook_query_TAG_alter
 * \_ from https://eureka.ykyuen.info/2012/05/16/drupal-7-order-entityfieldquery-by-random-using-hook_query_tag_alter/
 */
function node_table_query_random_alter($query) {
  $query->orderRandom();
}

function _get_content_type_option_array($empty_first_element = FALSE) {
  $empty_first_element = $empty_first_element === TRUE ? TRUE : FALSE;

  $content_type_option_array = array();
  $type_array = node_type_get_types();
  if ($empty_first_element) {
    $content_type_option_array[''] = '-';//char(8212);
  }
  foreach ($type_array as $key => $type_object) {
    $content_type_option_array[$key] = $type_object->name;
  }
  return $content_type_option_array;
}

function _gather_node_object_array($options_array) {
    foreach ($options_array as $key => $value) {
      $$key = $value;
    }
    if (!empty($list)) {
      $in_array = explode(',', $list);
    }else{
      $in_array = FALSE;
    }
    $nodeQuery = new EntityFieldQuery();
    $nodeQuery->entityCondition('entity_type', 'node')
    ->range(0, $limit);
    if (is_array($in_array)) {
      $nodeQuery->propertyCondition('nid', $in_array, 'IN');
    }
    if (!empty($content_types)) {
      $nodeQuery->propertyCondition('type', $content_types);
    }
    if ($orderby == 'RANDOM') {
      $nodeQuery->addTag('random');
    }
    if (in_array($orderby, array('NID','TITLE'))) {
      $column = strtolower($orderby);
      $nodeQuery->propertyOrderBy($column);
    }

    // ->fieldCondition('field_status', 'value', 1)
    // ->propertyOrderBy('tid', 'DESC')
    $result = $nodeQuery->execute();
    // $node_array = $result;
    if (count($result['node']) == 0) {
      $node_array = array();
    }else{
      $nid_array = array_keys($result['node']);
      $node_array = node_load_multiple($nid_array);
    }
    // $nid_array = array(4);
    // $conditions = array();
    // $reset = array();
    // $node_array = node_load_multiple($nid_array);
    return $node_array;
}

